# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
#services:
##  backend:
##    build:
##      context: ..
##      dockerfile: docker/Dockerfile
##    ports:
##      - "8080:8080"
##    networks:
##      - spring-postgres
#  db:
#    image: postgres
#    restart: always
#    user: postgres
#    secrets:
#      - db-password
#    volumes:
#      - db-data:/var/lib/postgresql/data
#    networks:
#      - spring-postgres
#    environment:
#      - POSTGRES_DB=example
#      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#    expose:
#      - 5432
#    healthcheck:
#      test: [ "CMD", "pg_isready" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#
#volumes:
#  db-data:
#
#secrets:
#  db-password:
#    file: db/password.txt
#
#networks:
#  spring-postgres:

    # The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

networks:
  app-tier:
    driver: bridge

services:
  postgresql:
    environment:
          - POSTGRESQL_PASSWORD=postgres # postgreSQL 컨테이너 호스트
    image: 'bitnami/postgresql:latest'
    networks:
      - app-tier
    volumes:
      - testvolume1:/bitnami/postgresql
    ports:
      - "5432:5432"
volumes:
  testvolume1:
